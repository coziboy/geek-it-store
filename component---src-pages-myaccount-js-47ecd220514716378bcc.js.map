{"version":3,"sources":["webpack:///./src/components/OrderItemList/index.js","webpack:///./src/pages/myaccount.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Message/MessageContent.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Message/MessageHeader.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Message/MessageItem.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Message/MessageList.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Message/Message.js","webpack:///./node_modules/semantic-ui-react/dist/es/elements/Loader/Loader.js"],"names":["orders","loading","Loader","active","inline","length","Message","warning","Header","to","as","map","order","id","billing_address","shipping_address","status","meta","order_items","completed","price","display_price","with_tax","formatted","Segment","Group","key","Label","icon","color","content","toUpperCase","JSON","stringify","horizontal","line_1","line_2","city","postcode","county","country","MyAccount","location","useState","setLoading","setOrders","included","setIncluded","setMeta","token","useContext","AuthContext","useEffect","navigate","getOrders","then","data","catch","error","console","log","Layout","SEO","title","OrderItemList","MessageContent","props","children","className","classes","rest","getUnhandledProps","ElementType","getElementType","createElement","isNil","handledProps","propTypes","MessageHeader","create","val","MessageItem","defaultProps","MessageList","items","_Component","_getPrototypeOf2","_this","this","_len","arguments","args","Array","_key","call","apply","concat","e","onDismiss","value","_this$props","attached","compact","floating","header","hidden","info","list","negative","positive","size","success","visible","dismissIcon","Icon","name","onClick","handleDismiss","autoGenerateKey","disabled","indeterminate","inverted"],"mappings":"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","file":"component---src-pages-myaccount-js-47ecd220514716378bcc.js","sourcesContent":["/* eslint-disable camelcase */\nimport React from 'react'\nimport {Link} from 'gatsby'\nimport {Header, Loader, Message, Label, Segment} from 'semantic-ui-react'\n\nexport default ({orders, loading}) => {\n  if (loading) return <Loader active inline=\"centered\" />\n\n  if (orders.length === 0) {\n    return (\n      <Message warning>\n        <Message.Header>No recent orders</Message.Header>\n        <p>\n          When you place an order, they will appear here.\n          <Link to=\"/\"> Go shopping.</Link>\n        </p>\n      </Message>\n    )\n  }\n\n  return (\n    <div>\n      <Header as=\"h1\">My previous orders</Header>\n\n      {orders.map(order => {\n        const {\n          id,\n          billing_address,\n          shipping_address,\n          status,\n          meta,\n          order_items,\n        } = order\n        const completed = status === 'complete'\n        const price = meta.display_price.with_tax.formatted\n\n        return (\n          <Segment.Group key={id}>\n            <Segment>\n              <Header as=\"h4\">{price}</Header>\n              <Label\n                icon={completed ? 'check' : null}\n                color={completed ? 'green' : null}\n                content={status.toUpperCase()}\n              />\n              <pre>{JSON.stringify(order_items, '\\t', 2)}</pre>\n            </Segment>\n            <Segment.Group horizontal>\n              <Segment>\n                <Header as=\"h4\">Billing address:</Header>\n                <p>\n                  {billing_address.line_1}\n                  <br />\n                  {billing_address.line_2}\n                  <br />\n                  {billing_address.city}\n                  <br />\n                  {billing_address.postcode}\n                  <br />\n                  {billing_address.county}\n                  <br />\n                  {billing_address.country}\n                </p>\n              </Segment>\n              <Segment>\n                <Header as=\"h4\">Shipping address:</Header>\n                <p>\n                  {shipping_address.line_1}\n                  <br />\n                  {shipping_address.line_2}\n                  <br />\n                  {shipping_address.city}\n                  <br />\n                  {shipping_address.postcode}\n                  <br />\n                  {shipping_address.county}\n                  <br />\n                  {shipping_address.country}\n                </p>\n              </Segment>\n            </Segment.Group>\n          </Segment.Group>\n        )\n      })}\n    </div>\n  )\n}\n","import React, {useState, useEffect, useContext} from 'react'\nimport {navigate} from 'gatsby'\nimport SEO from '../components/SEO'\nimport OrderItemList from '../components/OrderItemList'\nimport Layout from '../components/Layout'\nimport AuthContext from '../components/Context/AuthContext'\n\nimport {getOrders} from '../../lib/moltin'\n\nconst MyAccount = ({location}) => {\n  const [loading, setLoading] = useState(true)\n  const [orders, setOrders] = useState([])\n  const [included, setIncluded] = useState([])\n  const [meta, setMeta] = useState({})\n  const {token} = useContext(AuthContext)\n\n  useEffect(() => {\n    if (!token) {\n      navigate('/login/')\n    }\n    getOrders(token)\n      .then(({data, meta, included}) => {\n        const orders = data.map(order => ({\n          ...order,\n        }))\n        setLoading(false)\n        setMeta(meta)\n        setOrders(orders)\n        setIncluded(included)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }, [token])\n\n  return (\n    <Layout location={location}>\n      <SEO title=\"My Account\" />\n      <OrderItemList\n        meta={meta}\n        orders={orders}\n        loading={loading}\n        included={included}\n      />\n    </Layout>\n  )\n}\nexport default MyAccount\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a content.\n */\n\nfunction MessageContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageContent, props);\n  var ElementType = getElementType(MessageContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageContent.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default MessageContent;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message can contain a header.\n */\n\nfunction MessageHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('header', className);\n  var rest = getUnhandledProps(MessageHeader, props);\n  var ElementType = getElementType(MessageHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageHeader.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageHeader.create = createShorthandFactory(MessageHeader, function (val) {\n  return {\n    content: val\n  };\n});\nexport default MessageHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A message list can contain an item.\n */\n\nfunction MessageItem(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('content', className);\n  var rest = getUnhandledProps(MessageItem, props);\n  var ElementType = getElementType(MessageItem, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nMessageItem.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nMessageItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nMessageItem.defaultProps = {\n  as: 'li'\n};\nMessageItem.create = createShorthandFactory(MessageItem, function (content) {\n  return {\n    content: content\n  };\n});\nexport default MessageItem;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport MessageItem from './MessageItem';\n/**\n * A message can contain a list of items.\n */\n\nfunction MessageList(props) {\n  var children = props.children,\n      className = props.className,\n      items = props.items;\n  var classes = cx('list', className);\n  var rest = getUnhandledProps(MessageList, props);\n  var ElementType = getElementType(MessageList, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? _map(items, MessageItem.create) : children);\n}\n\nMessageList.handledProps = [\"as\", \"children\", \"className\", \"items\"];\nMessageList.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand Message.Items. */\n  items: customPropTypes.collectionShorthand\n} : {};\nMessageList.defaultProps = {\n  as: 'ul'\n};\nMessageList.create = createShorthandFactory(MessageList, function (val) {\n  return {\n    items: val\n  };\n});\nexport default MessageList;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNil from \"lodash/isNil\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createHTMLParagraph, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\nimport Icon from '../../elements/Icon';\nimport MessageContent from './MessageContent';\nimport MessageHeader from './MessageHeader';\nimport MessageList from './MessageList';\nimport MessageItem from './MessageItem';\n/**\n * A message displays information that explains nearby content.\n * @see Form\n */\n\nvar Message =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Message, _Component);\n\n  function Message() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Message)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDismiss\", function (e) {\n      var onDismiss = _this.props.onDismiss;\n      if (onDismiss) onDismiss(e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          attached = _this$props.attached,\n          children = _this$props.children,\n          className = _this$props.className,\n          color = _this$props.color,\n          compact = _this$props.compact,\n          content = _this$props.content,\n          error = _this$props.error,\n          floating = _this$props.floating,\n          header = _this$props.header,\n          hidden = _this$props.hidden,\n          icon = _this$props.icon,\n          info = _this$props.info,\n          list = _this$props.list,\n          negative = _this$props.negative,\n          onDismiss = _this$props.onDismiss,\n          positive = _this$props.positive,\n          size = _this$props.size,\n          success = _this$props.success,\n          visible = _this$props.visible,\n          warning = _this$props.warning;\n      var classes = cx('ui', color, size, useKeyOnly(compact, 'compact'), useKeyOnly(error, 'error'), useKeyOnly(floating, 'floating'), useKeyOnly(hidden, 'hidden'), useKeyOnly(icon, 'icon'), useKeyOnly(info, 'info'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(success, 'success'), useKeyOnly(visible, 'visible'), useKeyOnly(warning, 'warning'), useKeyOrValueAndKey(attached, 'attached'), 'message', className);\n      var dismissIcon = onDismiss && React.createElement(Icon, {\n        name: \"close\",\n        onClick: this.handleDismiss\n      });\n      var rest = getUnhandledProps(Message, this.props);\n      var ElementType = getElementType(Message, this.props);\n\n      if (!childrenUtils.isNil(children)) {\n        return React.createElement(ElementType, _extends({}, rest, {\n          className: classes\n        }), dismissIcon, children);\n      }\n\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes\n      }), dismissIcon, Icon.create(icon, {\n        autoGenerateKey: false\n      }), (!_isNil(header) || !_isNil(content) || !_isNil(list)) && React.createElement(MessageContent, null, MessageHeader.create(header, {\n        autoGenerateKey: false\n      }), MessageList.create(list, {\n        autoGenerateKey: false\n      }), createHTMLParagraph(content, {\n        autoGenerateKey: false\n      })));\n    }\n  }]);\n\n  return Message;\n}(Component);\n\n_defineProperty(Message, \"Content\", MessageContent);\n\n_defineProperty(Message, \"Header\", MessageHeader);\n\n_defineProperty(Message, \"List\", MessageList);\n\n_defineProperty(Message, \"Item\", MessageItem);\n\n_defineProperty(Message, \"handledProps\", [\"as\", \"attached\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"error\", \"floating\", \"header\", \"hidden\", \"icon\", \"info\", \"list\", \"negative\", \"onDismiss\", \"positive\", \"size\", \"success\", \"visible\", \"warning\"]);\n\nexport { Message as default };\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A message can be formatted to attach itself to other content. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['bottom', 'top'])]),\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A message can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A message can only take up the width of its content. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `negative`. */\n  error: PropTypes.bool,\n\n  /** A message can float above content that it is related to. */\n  floating: PropTypes.bool,\n\n  /** Shorthand for MessageHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** A message can be hidden. */\n  hidden: PropTypes.bool,\n\n  /** A message can contain an icon. */\n  icon: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.bool]),\n\n  /** A message may be formatted to display information. */\n  info: PropTypes.bool,\n\n  /** Array shorthand items for the MessageList. Mutually exclusive with children. */\n  list: customPropTypes.collectionShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `error`. */\n  negative: PropTypes.bool,\n\n  /**\n   * A message that the user can choose to hide.\n   * Called when the user clicks the \"x\" icon. This also adds the \"x\" icon.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onDismiss: PropTypes.func,\n\n  /** A message may be formatted to display a positive message.  Same as `success`. */\n  positive: PropTypes.bool,\n\n  /** A message can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A message may be formatted to display a positive message.  Same as `positive`. */\n  success: PropTypes.bool,\n\n  /** A message can be set to visible to force itself to be shown. */\n  visible: PropTypes.bool,\n\n  /** A message may be formatted to display warning messages. */\n  warning: PropTypes.bool\n} : {};","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey } from '../../lib';\n/**\n * A loader alerts a user to wait for an activity to complete.\n * @see Dimmer\n */\n\nfunction Loader(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      disabled = props.disabled,\n      indeterminate = props.indeterminate,\n      inline = props.inline,\n      inverted = props.inverted,\n      size = props.size;\n  var classes = cx('ui', size, useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(indeterminate, 'indeterminate'), useKeyOnly(inverted, 'inverted'), useKeyOnly(children || content, 'text'), useKeyOrValueAndKey(inline, 'inline'), 'loader', className);\n  var rest = getUnhandledProps(Loader, props);\n  var ElementType = getElementType(Loader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nLoader.handledProps = [\"active\", \"as\", \"children\", \"className\", \"content\", \"disabled\", \"indeterminate\", \"inline\", \"inverted\", \"size\"];\nLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A loader can be active or visible. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A loader can be disabled or hidden. */\n  disabled: PropTypes.bool,\n\n  /** A loader can show it's unsure of how long a task will take. */\n  indeterminate: PropTypes.bool,\n\n  /** Loaders can appear inline with content. */\n  inline: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['centered'])]),\n\n  /** Loaders can have their colors inverted. */\n  inverted: PropTypes.bool,\n\n  /** Loaders can have different sizes. */\n  size: PropTypes.oneOf(SUI.SIZES)\n} : {};\nexport default Loader;"],"sourceRoot":""}